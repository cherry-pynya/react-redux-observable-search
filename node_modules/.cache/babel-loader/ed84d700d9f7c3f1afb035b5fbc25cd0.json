{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { PENDING, SUCCESS, ERROR, URL } from \"../params/params\";\nimport { ofType } from \"redux-observable\";\nimport { of } from \"rxjs\";\nimport { ajax } from \"rxjs/ajax\";\nimport { map, filter, debounceTime, switchMap, catchError, retry, pipe, mergeMap } from \"rxjs/operators\";\nexport const searchSlice = createSlice({\n  name: \"search\",\n  initialState: {\n    status: PENDING,\n    data: [],\n    inputEmpty: true,\n    search: \"\"\n  },\n  reducers: {\n    setData: (state, action) => {\n      state.data = action.payload;\n    },\n    inputEmptyTrue: state => {\n      state.inputEmpty = true;\n    },\n    inputEmptyFalse: state => {\n      state.inputEmpty = false;\n    },\n    statusPending: state => {\n      state.status = PENDING;\n    },\n    statusSuccess: state => {\n      state.status = SUCCESS;\n    },\n    statusError: state => {\n      state.status = ERROR;\n    },\n    request: (state, action) => {\n      console.log(action.payload);\n      state.status = PENDING;\n    },\n    changeSearchField: (state, action) => {\n      state.search = action.payload;\n    }\n  }\n});\nexport const changeEpic = actions$ => actions$.pipe(ofType(searchSlice.actions.changeSearchField), map(o => o.payload.trim()), debounceTime(100), mergeMap(o => {\n  if (o === \"\") {\n    setData([]);\n  } else {\n    inputEmptyFalse;\n    return of(request(o));\n  }\n}));\nexport const searchEpic = action$ => action$.pipe(ofType(searchSlice.actions.request), map(o => o.payload), map(o => new URLSearchParams({\n  q: o\n})), switchMap(o => ajax.getJSON(`${URL}?${o}`).pipe(retry(3), map(o => setData(o)), catchError(e => of(statusError())))));\nexport const {\n  setData,\n  inputEmptyFalse,\n  statusPending,\n  statusSuccess,\n  statusError,\n  inputEmptyTrue,\n  request,\n  changeSearchField\n} = searchSlice.actions;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/nikitacerepna/Desktop/netology/react/observable/react-redux-observable-search/src/slices/searchSlice.js"],"names":["createSlice","PENDING","SUCCESS","ERROR","URL","ofType","of","ajax","map","filter","debounceTime","switchMap","catchError","retry","pipe","mergeMap","searchSlice","name","initialState","status","data","inputEmpty","search","reducers","setData","state","action","payload","inputEmptyTrue","inputEmptyFalse","statusPending","statusSuccess","statusError","request","console","log","changeSearchField","changeEpic","actions$","actions","o","trim","searchEpic","action$","URLSearchParams","q","getJSON","e","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { PENDING, SUCCESS, ERROR, URL } from \"../params/params\";\r\nimport { ofType } from \"redux-observable\";\r\nimport { of } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  map,\r\n  filter,\r\n  debounceTime,\r\n  switchMap,\r\n  catchError,\r\n  retry,\r\n  pipe,\r\n  mergeMap,\r\n} from \"rxjs/operators\";\r\n\r\nexport const searchSlice = createSlice({\r\n  name: \"search\",\r\n  initialState: {\r\n    status: PENDING,\r\n    data: [],\r\n    inputEmpty: true,\r\n    search: \"\",\r\n  },\r\n  reducers: {\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n    inputEmptyTrue: (state) => {\r\n      state.inputEmpty = true;\r\n    },\r\n    inputEmptyFalse: (state) => {\r\n      state.inputEmpty = false;\r\n    },\r\n    statusPending: (state) => {\r\n      state.status = PENDING;\r\n    },\r\n    statusSuccess: (state) => {\r\n      state.status = SUCCESS;\r\n    },\r\n    statusError: (state) => {\r\n      state.status = ERROR;\r\n    },\r\n    request: (state, action) => {\r\n      console.log(action.payload)\r\n      state.status = PENDING;\r\n    },\r\n    changeSearchField: (state, action) => {\r\n      state.search = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const changeEpic = (actions$) =>\r\n  actions$.pipe(\r\n    ofType(searchSlice.actions.changeSearchField),\r\n    map((o) => o.payload.trim()),\r\n    debounceTime(100),\r\n    mergeMap((o) => {\r\n      if (o === \"\") {\r\n        setData([]);\r\n      } else {\r\n        inputEmptyFalse\r\n        return of(request(o));\r\n      }\r\n    })\r\n  );\r\n\r\nexport const searchEpic = (action$) =>\r\n  action$.pipe(\r\n    ofType(searchSlice.actions.request),\r\n    map((o) => o.payload),\r\n    map((o) => new URLSearchParams({q: o})),\r\n    switchMap((o) =>\r\n      ajax.getJSON(`${URL}?${o}`).pipe(\r\n        retry(3),\r\n        map((o) => setData(o)),\r\n        catchError((e) => of(statusError()))\r\n      )\r\n    )\r\n  );\r\n\r\nexport const {\r\n  setData,\r\n  inputEmptyFalse,\r\n  statusPending,\r\n  statusSuccess,\r\n  statusError,\r\n  inputEmptyTrue,\r\n  request,\r\n  changeSearchField,\r\n} = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}