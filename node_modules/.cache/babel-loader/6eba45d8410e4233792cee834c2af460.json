{"ast":null,"code":"import { merge } from 'rxjs';\n/**\n  Merges all epics into a single one.\n */\n\nexport function combineEpics() {\n  var epics = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    epics[_i] = arguments[_i];\n  }\n\n  var merger = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return merge.apply(void 0, epics.map(function (epic) {\n      var output$ = epic.apply(void 0, args);\n\n      if (!output$) {\n        throw new TypeError(\"combineEpics: one of the provided Epics \\\"\" + (epic.name || '<anonymous>') + \"\\\" does not return a stream. Double check you're not missing a return statement!\");\n      }\n\n      return output$;\n    }));\n  }; // Technically the `name` property on Function's are supposed to be read-only.\n  // While some JS runtimes allow it anyway (so this is useful in debugging)\n  // some actually throw an exception when you attempt to do so.\n\n\n  try {\n    Object.defineProperty(merger, 'name', {\n      value: \"combineEpics(\" + epics.map(function (epic) {\n        return epic.name || '<anonymous>';\n      }).join(', ') + \")\"\n    });\n  } catch (e) {}\n\n  return merger;\n}","map":{"version":3,"sources":["/Users/nikitacerepna/Desktop/netology/react/observable/react-redux-observable-search/node_modules/redux-observable/dist/esm/combineEpics.js"],"names":["merge","combineEpics","epics","_i","arguments","length","merger","args","apply","map","epic","output$","TypeError","name","Object","defineProperty","value","join","e"],"mappings":"AAAA,SAASA,KAAT,QAAsB,MAAtB;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,GAAwB;AAC3B,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,KAAK,CAACC,EAAD,CAAL,GAAYC,SAAS,CAACD,EAAD,CAArB;AACH;;AACD,MAAIG,MAAM,GAAG,YAAY;AACrB,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIJ,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CI,MAAAA,IAAI,CAACJ,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;AACH;;AACD,WAAOH,KAAK,CAACQ,KAAN,CAAY,KAAK,CAAjB,EAAoBN,KAAK,CAACO,GAAN,CAAU,UAAUC,IAAV,EAAgB;AACjD,UAAIC,OAAO,GAAGD,IAAI,CAACF,KAAL,CAAW,KAAK,CAAhB,EAAmBD,IAAnB,CAAd;;AACA,UAAI,CAACI,OAAL,EAAc;AACV,cAAM,IAAIC,SAAJ,CAAc,gDAAgDF,IAAI,CAACG,IAAL,IAAa,aAA7D,IAA8E,kFAA5F,CAAN;AACH;;AACD,aAAOF,OAAP;AACH,KAN0B,CAApB,CAAP;AAOH,GAZD,CAL2B,CAkB3B;AACA;AACA;;;AACA,MAAI;AACAG,IAAAA,MAAM,CAACC,cAAP,CAAsBT,MAAtB,EAA8B,MAA9B,EAAsC;AAClCU,MAAAA,KAAK,EAAE,kBAAkBd,KAAK,CAACO,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAAE,eAAOA,IAAI,CAACG,IAAL,IAAa,aAApB;AAAoC,OAAhE,EAAkEI,IAAlE,CAAuE,IAAvE,CAAlB,GAAiG;AADtE,KAAtC;AAGH,GAJD,CAKA,OAAOC,CAAP,EAAU,CAAG;;AACb,SAAOZ,MAAP;AACH","sourcesContent":["import { merge } from 'rxjs';\n/**\n  Merges all epics into a single one.\n */\nexport function combineEpics() {\n    var epics = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        epics[_i] = arguments[_i];\n    }\n    var merger = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return merge.apply(void 0, epics.map(function (epic) {\n            var output$ = epic.apply(void 0, args);\n            if (!output$) {\n                throw new TypeError(\"combineEpics: one of the provided Epics \\\"\" + (epic.name || '<anonymous>') + \"\\\" does not return a stream. Double check you're not missing a return statement!\");\n            }\n            return output$;\n        }));\n    };\n    // Technically the `name` property on Function's are supposed to be read-only.\n    // While some JS runtimes allow it anyway (so this is useful in debugging)\n    // some actually throw an exception when you attempt to do so.\n    try {\n        Object.defineProperty(merger, 'name', {\n            value: \"combineEpics(\" + epics.map(function (epic) { return epic.name || '<anonymous>'; }).join(', ') + \")\",\n        });\n    }\n    catch (e) { }\n    return merger;\n}\n"]},"metadata":{},"sourceType":"module"}