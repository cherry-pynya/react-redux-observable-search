{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { PENDING, SUCCESS, ERROR, URL } from '../params/params';\nimport { ofType } from 'redux-observable';\nimport { of } from 'rxjs';\nimport { ajax } from 'rxjs/ajax';\nimport { map, filter, debounceTime, switchMap, catchError } from 'rxjs/operators';\nexport const searchSlice = createSlice({\n  name: 'search',\n  initialState: {\n    status: PENDING,\n    data: [],\n    inputEmpty: true\n  },\n  reducers: {\n    setData: (state, action) => {\n      state.data = action.payload;\n    },\n    inputEmptyTrue: state => {\n      state.inputEmpty = true;\n    },\n    inputEmptyFalse: state => {\n      state.inputEmpty = false;\n    },\n    statusPending: state => {\n      state.status = PENDING;\n    },\n    statusSuccess: state => {\n      state.status = SUCCESS;\n    },\n    statusError: state => {\n      state.status = ERROR;\n    }\n  }\n});\nexport const searchEpic = action$ => action$.pipe(ofType(searchSlice.actions.setData.match), map(o => {\n  o.payload.searc, console.log(o);\n}), map(o => new URLSearchParams({\n  q: o\n})), switchMap(o => ajax.getJSON(`${URL}?${o}`)), map(acttion => searchSlice.actions.setData(acttion.payload)));\nexport const {\n  setData,\n  inputEmptyFalse,\n  statusPending,\n  statusSuccess,\n  statusError,\n  inputEmptyTrue\n} = searchSlice.actions;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/nikitacerepna/Desktop/netology/react/observable/react-redux-observable-search/src/slices/searchSlice.js"],"names":["createSlice","PENDING","SUCCESS","ERROR","URL","ofType","of","ajax","map","filter","debounceTime","switchMap","catchError","searchSlice","name","initialState","status","data","inputEmpty","reducers","setData","state","action","payload","inputEmptyTrue","inputEmptyFalse","statusPending","statusSuccess","statusError","searchEpic","action$","pipe","actions","match","o","searc","console","log","URLSearchParams","q","getJSON","acttion","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,KAA3B,EAAkCC,GAAlC,QAA6C,kBAA7C;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,YAAtB,EAAoCC,SAApC,EAA+CC,UAA/C,QAAiE,gBAAjE;AAEA,OAAO,MAAMC,WAAW,GAAGb,WAAW,CAAC;AACrCc,EAAAA,IAAI,EAAE,QAD+B;AAErCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAEf,OADI;AAEZgB,IAAAA,IAAI,EAAE,EAFM;AAGZC,IAAAA,UAAU,EAAE;AAHA,GAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACJ,IAAN,GAAaK,MAAM,CAACC,OAApB;AACD,KAHO;AAIRC,IAAAA,cAAc,EAAGH,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACH,UAAN,GAAmB,IAAnB;AACD,KANO;AAORO,IAAAA,eAAe,EAAGJ,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAACH,UAAN,GAAmB,KAAnB;AACD,KATO;AAURQ,IAAAA,aAAa,EAAGL,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACL,MAAN,GAAef,OAAf;AACD,KAZO;AAaR0B,IAAAA,aAAa,EAAGN,KAAD,IAAW;AACxBA,MAAAA,KAAK,CAACL,MAAN,GAAed,OAAf;AACD,KAfO;AAgBR0B,IAAAA,WAAW,EAAGP,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACL,MAAN,GAAeb,KAAf;AACD;AAlBO;AAP2B,CAAD,CAA/B;AA6BP,OAAO,MAAM0B,UAAU,GAAGC,OAAO,IAAIA,OAAO,CAACC,IAAR,CACnC1B,MAAM,CAACQ,WAAW,CAACmB,OAAZ,CAAoBZ,OAApB,CAA4Ba,KAA7B,CAD6B,EAEnCzB,GAAG,CAAC0B,CAAC,IAAI;AAACA,EAAAA,CAAC,CAACX,OAAF,CAAUY,KAAV,EAAiBC,OAAO,CAACC,GAAR,CAAYH,CAAZ,CAAjB;AAAgC,CAAvC,CAFgC,EAGnC1B,GAAG,CAAC0B,CAAC,IAAI,IAAII,eAAJ,CAAoB;AAACC,EAAAA,CAAC,EAAEL;AAAJ,CAApB,CAAN,CAHgC,EAInCvB,SAAS,CAACuB,CAAC,IAAI3B,IAAI,CAACiC,OAAL,CAAc,GAAEpC,GAAI,IAAG8B,CAAE,EAAzB,CAAN,CAJ0B,EAKnC1B,GAAG,CAACiC,OAAO,IAAI5B,WAAW,CAACmB,OAAZ,CAAoBZ,OAApB,CAA4BqB,OAAO,CAAClB,OAApC,CAAZ,CALgC,CAA9B;AAQP,OAAO,MAAM;AAAEH,EAAAA,OAAF;AAAWK,EAAAA,eAAX;AAA4BC,EAAAA,aAA5B;AAA2CC,EAAAA,aAA3C;AAA0DC,EAAAA,WAA1D;AAAuEJ,EAAAA;AAAvE,IAA0FX,WAAW,CAACmB,OAA5G;AAEP,eAAenB,WAAW,CAAC6B,OAA3B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { PENDING, SUCCESS, ERROR, URL } from '../params/params';\r\nimport { ofType } from 'redux-observable';\r\nimport { of } from 'rxjs';\r\nimport { ajax } from 'rxjs/ajax';\r\nimport { map, filter, debounceTime, switchMap, catchError } from 'rxjs/operators';\r\n\r\nexport const searchSlice = createSlice({\r\n  name: 'search',\r\n  initialState: {\r\n    status: PENDING,\r\n    data: [],\r\n    inputEmpty: true,\r\n  },\r\n  reducers: {\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n    inputEmptyTrue: (state) => {\r\n      state.inputEmpty = true;\r\n    },\r\n    inputEmptyFalse: (state) => {\r\n      state.inputEmpty = false;\r\n    },\r\n    statusPending: (state) => {\r\n      state.status = PENDING;\r\n    },\r\n    statusSuccess: (state) => {\r\n      state.status = SUCCESS;\r\n    },\r\n    statusError: (state) => {\r\n      state.status = ERROR;\r\n    },\r\n  }\r\n});\r\n\r\nexport const searchEpic = action$ => action$.pipe(\r\n  ofType(searchSlice.actions.setData.match),\r\n  map(o => {o.payload.searc, console.log(o)}),\r\n  map(o => new URLSearchParams({q: o})),\r\n  switchMap(o => ajax.getJSON(`${URL}?${o}`)),\r\n  map(acttion => searchSlice.actions.setData(acttion.payload)),\r\n);\r\n\r\nexport const { setData, inputEmptyFalse, statusPending, statusSuccess, statusError, inputEmptyTrue } = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;"]},"metadata":{},"sourceType":"module"}