{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { PENDING, SUCCESS, ERROR, URL } from \"../params/params\";\nimport { ofType } from \"redux-observable\";\nimport { of } from \"rxjs\";\nimport { ajax } from \"rxjs/ajax\";\nimport { map, filter, debounceTime, switchMap, catchError, retry, pipe, mergeMap } from \"rxjs/operators\";\nexport const searchSlice = createSlice({\n  name: \"search\",\n  initialState: {\n    status: PENDING,\n    data: [],\n    inputEmpty: true,\n    search: \"\"\n  },\n  reducers: {\n    setData: (state, action) => {\n      state.data = action.payload;\n    },\n    resetData: state => {\n      state.data = [];\n      state.inputEmpty = true;\n    },\n    inputEmptyFalse: state => {\n      state.inputEmpty = false;\n    },\n    request: (state, action) => {\n      state.inputEmpty = false;\n      state.status = PENDING;\n    },\n    changeSearchField: (state, action) => {\n      state.search = action.payload;\n    }\n  }\n});\nexport const changeEpic = actions$ => actions$.pipe(ofType(searchSlice.actions.changeSearchField), map(o => o.payload.trim()), debounceTime(100), mergeMap(o => {\n  if (o === \"\") {\n    return of(resetData());\n  } else {\n    return of(request(o));\n  }\n}));\nexport const searchEpic = action$ => action$.pipe(ofType(searchSlice.actions.request), map(o => o.payload), map(o => new URLSearchParams({\n  q: o\n})), switchMap(o => ajax.getJSON(`${URL}?${o}`).pipe(retry(3), map(o => setData(o)), catchError(e => of(statusError())))));\nexport const {\n  setData,\n  inputEmptyFalse,\n  statusPending,\n  statusSuccess,\n  statusError,\n  inputEmptyTrue,\n  request,\n  changeSearchField,\n  resetData\n} = searchSlice.actions;\nexport default searchSlice.reducer;","map":{"version":3,"sources":["/Users/nikitacerepna/Desktop/netology/react/observable/react-redux-observable-search/src/slices/searchSlice.js"],"names":["createSlice","PENDING","SUCCESS","ERROR","URL","ofType","of","ajax","map","filter","debounceTime","switchMap","catchError","retry","pipe","mergeMap","searchSlice","name","initialState","status","data","inputEmpty","search","reducers","setData","state","action","payload","resetData","inputEmptyFalse","request","changeSearchField","changeEpic","actions$","actions","o","trim","searchEpic","action$","URLSearchParams","q","getJSON","e","statusError","statusPending","statusSuccess","inputEmptyTrue","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { PENDING, SUCCESS, ERROR, URL } from \"../params/params\";\r\nimport { ofType } from \"redux-observable\";\r\nimport { of } from \"rxjs\";\r\nimport { ajax } from \"rxjs/ajax\";\r\nimport {\r\n  map,\r\n  filter,\r\n  debounceTime,\r\n  switchMap,\r\n  catchError,\r\n  retry,\r\n  pipe,\r\n  mergeMap,\r\n} from \"rxjs/operators\";\r\n\r\nexport const searchSlice = createSlice({\r\n  name: \"search\",\r\n  initialState: {\r\n    status: PENDING,\r\n    data: [],\r\n    inputEmpty: true,\r\n    search: \"\",\r\n  },\r\n  reducers: {\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n    resetData: (state) => {\r\n      state.data = [];\r\n      state.inputEmpty = true;\r\n    },\r\n    inputEmptyFalse: (state) => {\r\n      state.inputEmpty = false;\r\n    },\r\n    request: (state, action) => {\r\n      state.inputEmpty = false;\r\n      state.status = PENDING;\r\n    },\r\n    changeSearchField: (state, action) => {\r\n      state.search = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const changeEpic = (actions$) =>\r\n  actions$.pipe(\r\n    ofType(searchSlice.actions.changeSearchField),\r\n    map((o) => o.payload.trim()),\r\n    debounceTime(100),\r\n    mergeMap((o) => {\r\n      if (o === \"\") {\r\n        return of(resetData());\r\n      } else {\r\n        return of(request(o));\r\n      }\r\n    })\r\n  );\r\n\r\nexport const searchEpic = (action$) =>\r\n  action$.pipe(\r\n    ofType(searchSlice.actions.request),\r\n    map((o) => o.payload),\r\n    map((o) => new URLSearchParams({q: o})),\r\n    switchMap((o) =>\r\n      ajax.getJSON(`${URL}?${o}`).pipe(\r\n        retry(3),\r\n        map((o) => setData(o)),\r\n        catchError((e) => of(statusError()))\r\n      )\r\n    )\r\n  );\r\n\r\nexport const {\r\n  setData,\r\n  inputEmptyFalse,\r\n  statusPending,\r\n  statusSuccess,\r\n  statusError,\r\n  inputEmptyTrue,\r\n  request,\r\n  changeSearchField,\r\n  resetData,\r\n} = searchSlice.actions;\r\n\r\nexport default searchSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}